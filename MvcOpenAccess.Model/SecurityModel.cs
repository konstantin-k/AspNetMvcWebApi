#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;


namespace MvcOpenAccess	
{
	public partial class SecurityModel : OpenAccessContext, ISecurityModelUnitOfWork
	{
		private static string connectionStringName = @"MyDatabaseConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
		
			
		private static MetadataSource metadataSource = XmlMetadataSource.FromAssemblyResource("SecurityModel.rlinq");
	
		public SecurityModel()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public SecurityModel(string connection)
			:base(connection, backend, metadataSource)
		{ }
	
		public SecurityModel(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public SecurityModel(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public SecurityModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IEnumerable<MvcOpenAccess.UserRole> GetUserRoles(string userName)
		{
			OAParameter parameterUserName = new OAParameter();
			parameterUserName.ParameterName = "userName";
			if(userName != null)
			{
				parameterUserName.Value = userName;
			}	
			else
			{
				parameterUserName.DbType = DbType.String;		
				parameterUserName.Value = DBNull.Value;
			}

			IEnumerable<MvcOpenAccess.UserRole> queryResult = this.ExecuteQuery<MvcOpenAccess.UserRole>("[GetUserRoles]", CommandType.StoredProcedure, parameterUserName);
	        
	    	return queryResult;
		}
		
		public System.Boolean ValidateUsers(string name, string pass)
		{
			OAParameter parameterName = new OAParameter();
			parameterName.ParameterName = "name";
			if(name != null)
			{
				parameterName.Value = name;
			}	
			else
			{
				parameterName.DbType = DbType.String;		
				parameterName.Value = DBNull.Value;
			}

			OAParameter parameterPass = new OAParameter();
			parameterPass.ParameterName = "pass";
			if(pass != null)
			{
				parameterPass.Value = pass;
			}	
			else
			{
				parameterPass.DbType = DbType.String;		
				parameterPass.Value = DBNull.Value;
			}

			System.Boolean queryResult = this.ExecuteScalar<System.Boolean>("[ValidateUsers]", CommandType.StoredProcedure, parameterName, parameterPass);
	        
	    	return queryResult;
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MsSql";
			backend.ProviderName = "System.Data.SqlClient";
			return backend;
		}
	}

	public interface ISecurityModelUnitOfWork : IUnitOfWork
	{
		IEnumerable<MvcOpenAccess.UserRole> GetUserRoles(string userName);

		System.Boolean ValidateUsers(string name, string pass);

	}
}
#pragma warning restore 1591

